{"ast":null,"code":"// log\nimport { updateAccount } from \"../blockchain/blockchainActions\";\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let tokensStaked = await store.getState().blockchain.smartContract.methods.tokensStaked().call();\n      dispatch(fetchDataSuccess({\n        tokensStaked\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["updateAccount","store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","tokensStaked","getState","blockchain","smartContract","methods","call","err","console","log"],"sources":["C:/Users/kayra/OneDrive/Desktop/Fingers Crossed/STAKING DAPP/fazel/greankhan/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport { updateAccount } from \"../blockchain/blockchainActions\";\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let tokensStaked = await store\n        .getState()\n        .blockchain.smartContract.methods.tokensStaked()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          tokensStaked,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,iCAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;EAC7B,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MACF,IAAIO,YAAY,GAAG,MAAMR,KAAK,CAC3BS,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWJ,YAFX,GAGtBK,IAHsB,EAAzB;MAKAN,QAAQ,CACNJ,gBAAgB,CAAC;QACfK;MADe,CAAD,CADV,CAAR;IAKD,CAXD,CAWE,OAAOM,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAP,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CAjBD;AAkBD,CAnBM"},"metadata":{},"sourceType":"module"}